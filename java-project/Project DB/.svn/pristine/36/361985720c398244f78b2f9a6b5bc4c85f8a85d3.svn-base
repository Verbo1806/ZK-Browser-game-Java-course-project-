package bg.infosys.daeu.db.dao.tech_specs;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.stereotype.Repository;

import bg.infosys.common.db.dao.GenericDaoImpl;
import bg.infosys.common.db.dao.aux.ListModelFilter;
import bg.infosys.common.utils.Strings;
import bg.infosys.daeu.db.entity.pub.Status;
import bg.infosys.daeu.db.entity.pub.SubjectVersion;
import bg.infosys.daeu.db.entity.tech_specs.TechSpecs;
import bg.infosys.daeu.db.entity.tech_specs.TechSpecsVersion;

@Repository
public class TechSpecsDAO extends GenericDaoImpl<TechSpecs, Integer> {
	public List<TechSpecs> findByProperties(String name, String outgoingNumber, 
			Status status, Date startPeriod, Date endPeriod, ListModelFilter filter) {
		
		CriteriaBuilder builder = criteriaBuilder();
		CriteriaQuery<TechSpecs> criteria = builder.createQuery(TechSpecs.class);
		Root<TechSpecs> root = criteria.from(TechSpecs.class);
		
		List<Predicate> predicates = new ArrayList<>();
		
		if (!Strings.isEmpty(name)) {
			predicates.add(builder.like(builder.lower(root.get(TechSpecs._subjectVersion).get(SubjectVersion._fullName)),
													  "%" + name.toLowerCase() + "%"));
		}
		
		if (!Strings.isEmpty(outgoingNumber)) {
			predicates.add(builder.like(root.get(TechSpecs._techSpecsVersion).get(TechSpecsVersion._outgoingNum), 
										"%" + outgoingNumber + "%"));
		}
		
		if (status != null) {
			predicates.add(builder.equal(root.get(TechSpecs._status), status));
		}
		
		if (startPeriod != null) {
			predicates.add(builder.greaterThanOrEqualTo(root.get(TechSpecs._techSpecsVersion).get(TechSpecsVersion._dateCreated), startPeriod));
		}
		
		if (endPeriod != null) {
			predicates.add(builder.lessThanOrEqualTo(root.get(TechSpecs._techSpecsVersion).get(TechSpecsVersion._dateCreated), endPeriod));
		}
		
		criteria.where(builder.and(predicates.toArray(new Predicate[predicates.size()])));
		
		return createQuery(criteria).setFirstResult(filter.getFrom()).setMaxResults(filter.getLimit()).getResultList();
	}
	
	public long countByProperties(String name, String outgoingNumber, 
			Status status, Date startPeriod, Date endPeriod) {
		
		CriteriaBuilder builder = criteriaBuilder();
		CriteriaQuery<Long> criteria = builder.createQuery(Long.class);
		Root<TechSpecs> root = criteria.from(TechSpecs.class);
		
		criteria.select(builder.count(root));
		
		List<Predicate> predicates = new ArrayList<>();
		
		if (!Strings.isEmpty(name)) {
			predicates.add(builder.like(builder.lower(root.get(TechSpecs._subjectVersion).get(SubjectVersion._fullName)),
													  "%" + name.toLowerCase() + "%"));
		}
		
		if (!Strings.isEmpty(outgoingNumber)) {
			predicates.add(builder.like(root.get(TechSpecs._techSpecsVersion).get(TechSpecsVersion._outgoingNum), 
										"%" + outgoingNumber + "%"));
		}
		
		if (status != null) {
			predicates.add(builder.equal(root.get(TechSpecs._status), status));
		}
		
		if (startPeriod != null) {
			predicates.add(builder.greaterThanOrEqualTo(root.get(TechSpecs._techSpecsVersion).get(TechSpecsVersion._dateCreated), startPeriod));
		}
		
		if (endPeriod != null) {
			predicates.add(builder.lessThanOrEqualTo(root.get(TechSpecs._techSpecsVersion).get(TechSpecsVersion._dateCreated), endPeriod));
		}
		
		criteria.where(builder.and(predicates.toArray(new Predicate[predicates.size()])));
	
		return createQuery(criteria).getSingleResult();
	}
}
