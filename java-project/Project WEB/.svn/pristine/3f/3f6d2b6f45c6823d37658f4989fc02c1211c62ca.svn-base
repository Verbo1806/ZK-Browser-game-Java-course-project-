package bg.infosys.daeu.web.vm.checklist;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.zkoss.bind.annotation.Command;
import org.zkoss.bind.annotation.Init;
import org.zkoss.zk.ui.Executions;
import org.zkoss.zk.ui.select.annotation.VariableResolver;
import org.zkoss.zk.ui.select.annotation.WireVariable;
import org.zkoss.zkplus.spring.DelegatingVariableResolver;

import bg.infosys.daeu.db.entity.pub.Checklist;
import bg.infosys.daeu.db.entity.pub.ChecklistConfig;
import bg.infosys.daeu.db.entity.pub.ChecklistElement;
import bg.infosys.daeu.db.entity.pub.ChecklistNDBO;
import bg.infosys.daeu.db.entity.pub.ChecklistValue;
import bg.infosys.daeu.db.entity.pub.FormType;
import bg.infosys.daeu.db.entity.security.Authority;
import bg.infosys.daeu.web.enums.DoubleChoise;
import bg.infosys.daeu.web.enums.TripleChoise;
import bg.infosys.daeu.web.service.NomenclaturesService;

@VariableResolver(DelegatingVariableResolver.class)
public class ChecklistVM {

	@WireVariable
	private NomenclaturesService nomenclaturesService;
	
	private List<ChecklistConfig> checklistConfig;
	private List<TripleChoise> checksYNNA;
	private List<DoubleChoise> checksYN;
	private Set<Authority> expertColumns = new LinkedHashSet<Authority>();
	private List<ChecklistNDBO> rows = new ArrayList<ChecklistNDBO>();
	
	@SuppressWarnings("unchecked")
	@Init
	public void init() {
		Map<String, Object> args = (Map<String, Object>) Executions.getCurrent().getArg();
		FormType formType = nomenclaturesService.getFormTypeByCode("F1");
		Checklist obj = (Checklist) args.get("4i4ko trevi4ko");

		setChecksYNNA(new ArrayList<TripleChoise>(Arrays.asList(TripleChoise.values())));
		setChecksYN(new ArrayList<DoubleChoise>(Arrays.asList(DoubleChoise.values())));
		List<ChecklistValue> checklistValues;
		if (obj != null) {
//			checklistValues = new ArrayList<ChecklistValue>(nomenclaturesService.findAllValuesByChecklist(obj));
			checklistValues = new ArrayList<ChecklistValue>(nomenclaturesService.findAllChecklistValues());
			checklistConfig = new ArrayList<ChecklistConfig>();
			for (ChecklistValue value : checklistValues) {
				checklistConfig.add(value.getConfig());
			}
		} else {
			checklistConfig = new ArrayList<ChecklistConfig>(nomenclaturesService.findChecklistElementsByFormType(formType));
			checklistValues = new ArrayList<ChecklistValue>();
		}
		expertColumns.add(new Authority());
		for(ChecklistConfig checkConfig : checklistConfig) {
			expertColumns.add(checkConfig.getAuthority());
		}
		loadForm(checklistConfig, checklistValues);
	}
	
	@Command
	public void save() {
		nomenclaturesService.saveChecklistValues(rows);
	}
	
	private void loadForm(List<ChecklistConfig> configs, List<ChecklistValue> checklistValues) {

		for (Authority role : expertColumns) {
			List<ChecklistElement> firstColumnElements = new ArrayList<ChecklistElement>();
			List<ChecklistElement> elements = new ArrayList<ChecklistElement>();
			for (ChecklistConfig checkConfig : configs) {
				if (role.getId() == 0) {
					if (!firstColumnElements.contains(checkConfig.getChecklistElement())) {
						ChecklistElement element = checkConfig.getChecklistElement();
						List<ChecklistValue> cells = new ArrayList<ChecklistValue>();
						cells.add(new ChecklistValue());
						rows.add(new ChecklistNDBO(element, cells));
						firstColumnElements.add(element);
					}
				} else {
					ChecklistElement element = checkConfig.getChecklistElement();
					ChecklistNDBO ndbo = rows.stream().filter(
							checklist -> checklist.getChecklistElement().equals(checkConfig.getChecklistElement()))
							.findAny().orElse(null);
					if (ndbo != null) {
						if (role.getId() == checkConfig.getAuthority().getId()) {
							ChecklistValue value;
								value = checklistValues.stream().filter(v -> v.getConfig().equals(checkConfig)).findAny().orElse(null);
							if (value == null) {
								value = new ChecklistValue();
								value.setConfig(checkConfig);
							}
							ndbo.getValues().add(value);
							elements.add(element);
						} else {
							if (!elements.contains(element)) {
								int index = configs.indexOf(checkConfig) + 1;
								if (index == configs.size()) {
									ChecklistValue value = new ChecklistValue();
									value.setVisible(false);
									ndbo.getValues().add(value);
									elements.add(element);
								} else {
									int count = 0;
									List<ChecklistConfig> list = configs.subList(index, configs.size());
									if (list.stream().filter(
											c -> c.getChecklistElement().equals(checkConfig.getChecklistElement()))
											.findFirst().isPresent()) {
										count++;
									}
									if (count == 0) {
										ChecklistValue value = new ChecklistValue();
										value.setVisible(false);
										ndbo.getValues().add(value);
										elements.add(element);
									}
								}
							}
						}
					}
				}
			}
		}
	}
	
	@Command
	public void print() {
		for (ChecklistNDBO ndbo : rows) {
			for (ChecklistValue value : ndbo.getValues()) {
				System.out.println(ndbo.getChecklistElement().getDescription() + " - " + value.getValue());
			}
		}
	}
	
	public List<ChecklistConfig> getChecklistConfig() {
		return checklistConfig;
	}
	
	public void setChecklistConfig(List<ChecklistConfig> checklistConfig) {
		this.checklistConfig = checklistConfig;
	}

	public List<TripleChoise> getChecksYNNA() {
		return checksYNNA;
	}

	public void setChecksYNNA(List<TripleChoise> checksYNNA) {
		this.checksYNNA = checksYNNA;
	}

	public List<DoubleChoise> getChecksYN() {
		return checksYN;
	}

	public void setChecksYN(List<DoubleChoise> checksYN) {
		this.checksYN = checksYN;
	}

	public Set<Authority> getExpertColumns() {
		return expertColumns;
	}

	public void setExpertColumns(Set<Authority> expertColumns) {
		this.expertColumns = expertColumns;
	}

	public List<ChecklistNDBO> getRows() {
		return rows;
	}

	public void setRows(List<ChecklistNDBO> rows) {
		this.rows = rows;
	}

}
