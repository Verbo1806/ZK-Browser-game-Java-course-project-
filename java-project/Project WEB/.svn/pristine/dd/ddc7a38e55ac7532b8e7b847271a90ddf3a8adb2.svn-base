package bg.infosys.daeu.web.vm.budget;

import java.util.ArrayList;
import java.util.List;

import org.zkoss.bind.BindUtils;
import org.zkoss.bind.annotation.AfterCompose;
import org.zkoss.bind.annotation.BindingParam;
import org.zkoss.bind.annotation.Command;
import org.zkoss.bind.annotation.ContextParam;
import org.zkoss.bind.annotation.ContextType;
import org.zkoss.bind.annotation.Init;
import org.zkoss.bind.annotation.NotifyChange;
import org.zkoss.zk.ui.Component;
import org.zkoss.zk.ui.Executions;
import org.zkoss.zk.ui.select.Selectors;
import org.zkoss.zk.ui.select.annotation.VariableResolver;
import org.zkoss.zk.ui.select.annotation.WireVariable;
import org.zkoss.zkplus.spring.DelegatingVariableResolver;

import bg.infosys.daeu.db.entity.budgets.Auxheader;
import bg.infosys.daeu.db.entity.budgets.BudgetForm;
import bg.infosys.daeu.db.entity.budgets.FormConfig;
import bg.infosys.daeu.db.entity.budgets.RowValue;
import bg.infosys.daeu.db.entity.budgets.RowValueType;
import bg.infosys.daeu.db.entity.budgets.SelectedCPVCode;
import bg.infosys.daeu.db.entity.budgets.VersionRow;
import bg.infosys.daeu.db.entity.pub.CPVCode;
import bg.infosys.daeu.db.entity.pub.EBKCode;
import bg.infosys.daeu.db.entity.pub.FormType;
import bg.infosys.daeu.web.aux.Config;
import bg.infosys.daeu.web.service.BudgetControlService;
import bg.infosys.daeu.web.service.NomenclaturesService;

@VariableResolver(DelegatingVariableResolver.class)
public class ForecastDraftBudgetVM {

	@WireVariable
	private BudgetControlService budgetControlService;
	@WireVariable
	private NomenclaturesService nomenclaturesService;
	private List<Auxheader> auxheaders = new ArrayList<>();
	private List<FormConfig> columns;
//	private List<VersionRow> rows;
	private List<CPVCode> cpvCodes;
	private List<EBKCode> ebkCodes;
	private VersionRow selectedElement;
	private int totalsColspan = 0;
	private String searchType;
	private BudgetForm budgetForm;
	private FormType formType;
	

	@Init
	public void init() {
		budgetForm = new BudgetForm();
		searchType = (String) Executions.getCurrent().getArg().get(Config.PARAM);
		auxheaders = new ArrayList<>();
		formType = nomenclaturesService.getFormTypeByCode(searchType);
		budgetForm.setFormType(formType);
		loadForm();
		System.out.println("dasdaa");
	}
	
	@AfterCompose
	public void afterComposeMenu(@ContextParam(ContextType.VIEW) Component view){
		Selectors.wireComponents(view, this, false);
	}
	
	@Command
	@NotifyChange("columns")
	public void collapse(@BindingParam("auxheader") Auxheader auxheader) {
		for (FormConfig config : columns) {
			if (config.getAuxheader().getId() == auxheader.getId() && !config.getFormColumnType().getCode().equals("TOTAL")) {
				config.setVisible(!config.isVisible());
			}
		}
	}
	
	private void loadForm(){
		
		columns = new ArrayList<FormConfig>(budgetControlService.findColumnsByConfig(formType,"MATRIX"));
//		rows = new ArrayList<VersionRow>(budgetControlService.findElementsByVersionAndFormType(formType,"MATRIX"));
//		rows = new ArrayList<VersionRow>();
		cpvCodes = new ArrayList<CPVCode>(budgetControlService.findAllCPVCodes());
		ebkCodes = new ArrayList<EBKCode>(budgetControlService.findAllEBKCodes());
		for(VersionRow element : budgetForm.getBudgetFormVersion().getVersionRow()){
			if(element.getId() != 0){
				element.getValues().addAll(budgetControlService.findValuesByElement(element));
			}
		}
		for(FormConfig config : columns){
			if(!auxheaders.contains(config.getAuxheader())){
				auxheaders.add(config.getAuxheader());
			}
			if (config.getAuxheader().getAuxheaderType().getIsVisible().equals("N")) {
				totalsColspan++;
			}
		}
		
		List<RowValueType> rowValueTypes = budgetControlService.findAllRowValueTypes();
		RowValueType sum = budgetControlService.getSumRowValue();
		
		for (RowValueType rowValueType : rowValueTypes) {
			if (!rowValueType.getCode().equals(sum.getCode())) {
				VersionRow element = new VersionRow();
				element.setBudgetFormVersion(budgetForm.getBudgetFormVersion());
				for(FormConfig column : columns){
					if (column.getAuxheader().getAuxheaderType().getIsVisible().equals("Y")) {
						RowValue value = new RowValue();
						value.setVersionRow(element);
						value.setFormConfig(column);
						value.setSelectedCpvCode(new SelectedCPVCode());
						value.setRowValueType(sum);
						element.getValues().add(value);
					} else {
						if (element.getValues().isEmpty()) {
							RowValue value = new RowValue();
							value.setVersionRow(element);
							value.setFormConfig(column);
							value.setSelectedCpvCode(new SelectedCPVCode());
							value.setRowValueType(rowValueType);
							element.getValues().add(value);
						}
					}
				}
				budgetForm.getBudgetFormVersion().getVersionRow().add(element);
			}
		}
	}
	
	
	@NotifyChange("rows")
	@Command
	public void refreshElement(@BindingParam("element") VersionRow element, @BindingParam("cpv") SelectedCPVCode selectedCPVCode, @BindingParam("ebk") EBKCode ebkCode){
		selectedElement = element;
		for(RowValue value : element.getValues()){
			if(selectedCPVCode != null && (value.getFormConfig().getFormColumnType().getCode().equals("CPVNAME") || value.getFormConfig().getFormColumnType().getCode().equals("ELEMENTORDER"))){
				value.setSelectedCpvCode(selectedCPVCode);
			}
			if (ebkCode != null && value.getFormConfig().getFormColumnType().getCode().equals("EBKCODE")) {
				value.setEbkCode(ebkCode);
			}
		}
		BindUtils.postNotifyChange(null, null, ForecastDraftBudgetVM.this, "selectedElement");
	}
	
	@Command
	public void calculate(@BindingParam("selectedValue") RowValue selectedValue){
		selectedElement = selectedValue.getVersionRow();
		Auxheader auxHeader = selectedValue.getFormConfig().getAuxheader();
		for(RowValue value : selectedElement.getValues()){
			if(value.getFormConfig().getAuxheader().getId() == auxHeader.getId()){
				if(value.getFormConfig().getFormColumnType().getCode().equals("TOTAL")){
					value.setValue(selectedElement.getValues().stream().filter(o -> o.getFormConfig().getAuxheader().getId() == auxHeader.getId() && 
							!o.getFormConfig().getFormColumnType().getCode().equals("TOTAL")).mapToInt(o -> o.getValue()).sum());
				}
			}
		}
		calculateSum(selectedValue);
		BindUtils.postNotifyChange(null, null, ForecastDraftBudgetVM.this, "rows");
		BindUtils.postNotifyChange(null, null, ForecastDraftBudgetVM.this, "selectedElement");
	}
	
	private void calculateSum(RowValue selectedValue) {
		int sum = 0;
		int totalSums = 0;
		for (int i=0; i<budgetForm.getBudgetFormVersion().getVersionRow().size()-3; i++) {
			for (RowValue value : budgetForm.getBudgetFormVersion().getVersionRow().get(i).getValues()) {
				if (selectedValue.getFormConfig().getAuxheader().getYear().equals(value.getFormConfig().getAuxheader().getYear())) {
					if (selectedValue.getFormConfig().getFormColumnType().getCode().equals(value.getFormConfig().getFormColumnType().getCode())
							&& selectedValue.getFormConfig().getFormColumnType().getComponentType().getCode().equals(value.getFormConfig().getFormColumnType().getComponentType().getCode())) {
						sum += value.getValue();
					}
					if (value.getFormConfig().getFormColumnType().getCode().equals("TOTAL")) {
						totalSums += value.getValue();
					}
				}
			}
		}
		for (RowValue value : budgetForm.getBudgetFormVersion().getVersionRow().get(budgetForm.getBudgetFormVersion().getVersionRow().size()-3).getValues()) {
			if (selectedValue.getFormConfig().getAuxheader().getYear().equals(value.getFormConfig().getAuxheader().getYear())) {
				if (selectedValue.getFormConfig().getFormColumnType().getCode().equals(value.getFormConfig().getFormColumnType().getCode())
					&& selectedValue.getFormConfig().getFormColumnType().getComponentType().getCode().equals(value.getFormConfig().getFormColumnType().getComponentType().getCode())) {
					value.setValue(sum);
				}
				if (value.getFormConfig().getFormColumnType().getCode().equals("TOTAL")) {
					value.setValue(totalSums);
				}
			}
		}
	}
	
	@NotifyChange("budgetForm")
	@Command
	public void add(){
		VersionRow element = new VersionRow();
		element.setBudgetFormVersion(budgetForm.getBudgetFormVersion());
		for(FormConfig column : columns){
			RowValue value = new RowValue();
			value.setVersionRow(element);
			value.setFormConfig(column);
			value.setSelectedCpvCode(new SelectedCPVCode());
//			value.setEbkCode(new EBKCode());
			element.getValues().add(value);
		}
		selectedElement = element;
		budgetForm.getBudgetFormVersion().getVersionRow().add(0,element);
	}

	@Command
	public void saveForm(){
		budgetControlService.saveBudgetForm(budgetForm);
//		for(VersionRow element : rows){
//			budgetControlService.saveRow(element);
//			budgetControlService.saveValues(element.getValues());
//		}
	}

	public BudgetControlService getBudgetControlService() {
		return budgetControlService;
	}

	public void setBudgetControlService(BudgetControlService budgetControlService) {
		this.budgetControlService = budgetControlService;
	}

	public List<Auxheader> getAuxheaders() {
		return auxheaders;
	}

	public void setAuxheaders(List<Auxheader> auxheaders) {
		this.auxheaders = auxheaders;
	}

	public List<FormConfig> getColumns() {
		return columns;
	}

	public void setColumns(List<FormConfig> columns) {
		this.columns = columns;
	}

//	public List<VersionRow> getRows() {
//		return rows;
//	}
//
//	public void setRows(List<VersionRow> rows) {
//		this.rows = rows;
//	}

	public List<CPVCode> getCpvCodes() {
		return cpvCodes;
	}

	public void setCpvCodes(List<CPVCode> cpvCodes) {
		this.cpvCodes = cpvCodes;
	}

	public VersionRow getSelectedElement() {
		return selectedElement;
	}

	public void setSelectedElement(VersionRow selectedElement) {
		this.selectedElement = selectedElement;
	}

	public List<EBKCode> getEbkCodes() {
		return ebkCodes;
	}

	public void setEbkCodes(List<EBKCode> ebkCodes) {
		this.ebkCodes = ebkCodes;
	}
	
	public int getTotalsColspan() {
		return totalsColspan;
	}

	public void setTotalsColspan(int totalsColspan) {
		this.totalsColspan = totalsColspan;
	}
	
	public String getSearchType() {
		return searchType;
	}

	public void setSearchType(String searchType) {
		this.searchType = searchType;
	}

	public BudgetForm getBudgetForm() {
		return budgetForm;
	}

	public void setBudgetForm(BudgetForm budgetForm) {
		this.budgetForm = budgetForm;
	}

	public FormType getFormType() {
		return formType;
	}

	public void setFormType(FormType formType) {
		this.formType = formType;
	}
	
}
