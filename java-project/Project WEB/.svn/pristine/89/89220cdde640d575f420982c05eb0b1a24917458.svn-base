package bg.infosys.daeu.web.vm.checklist;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import org.zkoss.bind.annotation.Command;
import org.zkoss.bind.annotation.Init;
import org.zkoss.zk.ui.select.annotation.VariableResolver;
import org.zkoss.zk.ui.select.annotation.WireVariable;
import org.zkoss.zkplus.spring.DelegatingVariableResolver;

import bg.infosys.daeu.db.entity.pub.ChecklistConfig;
import bg.infosys.daeu.db.entity.pub.ChecklistElement;
import bg.infosys.daeu.db.entity.pub.ChecklistNDBO;
import bg.infosys.daeu.db.entity.pub.ChecklistValue;
import bg.infosys.daeu.db.entity.pub.FormType;
import bg.infosys.daeu.db.entity.security.Authority;
import bg.infosys.daeu.web.enums.DoubleChoise;
import bg.infosys.daeu.web.enums.TripleChoise;
import bg.infosys.daeu.web.service.NomenclaturesService;

@VariableResolver(DelegatingVariableResolver.class)
public class ChecklistVM {

	@WireVariable
	private NomenclaturesService nomenclaturesService;
	
	private List<ChecklistConfig> checklistConfig;
	private List<TripleChoise> checksYNNA;
	private List<DoubleChoise> checksYN;
	private Set<Authority> expertColumns = new LinkedHashSet<Authority>();
	private List<ChecklistNDBO> rows = new ArrayList<ChecklistNDBO>();
	
	@Init
	public void init() {
		FormType formType = nomenclaturesService.getFormTypeByCode("F1");
		checklistConfig = new ArrayList<ChecklistConfig>(nomenclaturesService.findChecklistElementsByFormType(formType));

		setChecksYNNA(new ArrayList<TripleChoise>(Arrays.asList(TripleChoise.values())));
		setChecksYN(new ArrayList<DoubleChoise>(Arrays.asList(DoubleChoise.values())));
		expertColumns.add(new Authority());
		for(ChecklistConfig checkConfig : checklistConfig) {
			expertColumns.add(checkConfig.getAuthority());
		}
		createForm();
	}
	
	@Command
	public void print() {
		for (ChecklistNDBO ndbo : rows) {
			for (ChecklistValue value : ndbo.getValues()) {
				System.out.println(ndbo.getChecklistElement().getDescription() + " - " + value.getValue());
			}
		}
	}
	
	private void createForm() {
		for (Authority role : expertColumns) {
			if (role.getId() == 0) {
				List<ChecklistElement> elements = new ArrayList<ChecklistElement>();
				for (ChecklistConfig checkConfig : checklistConfig) {
					if (!elements.contains(checkConfig.getChecklistElement())) {
						ChecklistElement element = checkConfig.getChecklistElement();
						List<ChecklistValue> cells = new ArrayList<ChecklistValue>();
						cells.add(new ChecklistValue());
						rows.add(new ChecklistNDBO(element, cells));
						elements.add(element);
					}
				}
			} else {
				List<ChecklistElement> elements = new ArrayList<ChecklistElement>();
				for (ChecklistConfig checkConfig : checklistConfig) {
					ChecklistElement element = checkConfig.getChecklistElement();
					for (ChecklistNDBO ndbo : rows) {
						if (ndbo.getChecklistElement().equals(checkConfig.getChecklistElement())) {
							if (role.equals(checkConfig.getAuthority())) {
								ChecklistValue value = new ChecklistValue();
								value.setConfig(checkConfig);
								ndbo.getValues().add(value);
								elements.add(element);
							} else {
								if (!elements.contains(element)) {
									int index = checklistConfig.indexOf(checkConfig) + 1;
									if (index == checklistConfig.size()) {
										ChecklistValue value = new ChecklistValue();
										value.setVisible(false);
										ndbo.getValues().add(value);
										elements.add(element);
									} else {
										int count = 0;
										for (int i = index; i<checklistConfig.size(); i++) {
											if (checkConfig.getChecklistElement().equals(checklistConfig.get(i).getChecklistElement())) {
												count++;
											}
										}
										if (count == 0) {
											ChecklistValue value = new ChecklistValue();
											value.setVisible(false);
											ndbo.getValues().add(value);
											elements.add(element);
										}
										
									}
								}
							}
						}
					}
				}
			}
		}
		
	}

	public List<ChecklistConfig> getChecklistConfig() {
		return checklistConfig;
	}
	public void setChecklistConfig(List<ChecklistConfig> checklistConfig) {
		this.checklistConfig = checklistConfig;
	}

	public List<TripleChoise> getChecksYNNA() {
		return checksYNNA;
	}

	public void setChecksYNNA(List<TripleChoise> checksYNNA) {
		this.checksYNNA = checksYNNA;
	}

	public List<DoubleChoise> getChecksYN() {
		return checksYN;
	}

	public void setChecksYN(List<DoubleChoise> checksYN) {
		this.checksYN = checksYN;
	}

	public Set<Authority> getExpertColumns() {
		return expertColumns;
	}

	public void setExpertColumns(Set<Authority> expertColumns) {
		this.expertColumns = expertColumns;
	}

	public List<ChecklistNDBO> getRows() {
		return rows;
	}

	public void setRows(List<ChecklistNDBO> rows) {
		this.rows = rows;
	}

}
