package bg.infosys.daeu.web.vm.projects;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Base64;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import org.apache.commons.io.FileUtils;
import org.zkoss.bind.BindUtils;
import org.zkoss.bind.annotation.AfterCompose;
import org.zkoss.bind.annotation.BindingParam;
import org.zkoss.bind.annotation.Command;
import org.zkoss.bind.annotation.ContextParam;
import org.zkoss.bind.annotation.ContextType;
import org.zkoss.bind.annotation.Init;
import org.zkoss.bind.annotation.NotifyChange;
import org.zkoss.util.media.Media;
import org.zkoss.zk.ui.Component;
import org.zkoss.zk.ui.Executions;
import org.zkoss.zk.ui.event.Event;
import org.zkoss.zk.ui.event.UploadEvent;
import org.zkoss.zk.ui.select.Selectors;
import org.zkoss.zk.ui.select.annotation.Listen;
import org.zkoss.zk.ui.select.annotation.VariableResolver;
import org.zkoss.zk.ui.select.annotation.WireVariable;
import org.zkoss.zkplus.spring.DelegatingVariableResolver;
import org.zkoss.zul.ListModelList;

import com.google.gson.Gson;

import bg.infosys.daeu.db.entity.projects.AttachedDoc;
import bg.infosys.daeu.db.entity.projects.ExecutionData;
import bg.infosys.daeu.db.entity.projects.ExecutionValue;
import bg.infosys.daeu.db.entity.projects.Project;
import bg.infosys.daeu.db.entity.projects.ProjectBudget;
import bg.infosys.daeu.db.entity.projects.ProjectBudgetType;
import bg.infosys.daeu.db.entity.projects.ProjectFormConfig;
import bg.infosys.daeu.db.entity.projects.ProjectMainDataValue;
import bg.infosys.daeu.db.entity.pub.Funding;
import bg.infosys.daeu.web.aux.Config;
import bg.infosys.daeu.web.dto.DroppedFileDto;
import bg.infosys.daeu.web.enums.DoubleChoise;
import bg.infosys.daeu.web.enums.TripleChoise;
import bg.infosys.daeu.web.service.NomenclaturesService;
import bg.infosys.daeu.web.service.ProjectsService;

@VariableResolver(DelegatingVariableResolver.class)
public class ProjectsVM {
	@WireVariable private ProjectsService projectsService;
	@WireVariable private NomenclaturesService nomenclaturesService;
	
	private List<ProjectFormConfig> forms;
	private List<Funding> funding;
	
	private short page;
	private List<DroppedFileDto> attachedDocs;
	private int fundingId;
	
	private Project project;

	@Init
	public void init() {
		project = (Project) Executions.getCurrent().getArg().get(Config.PARAM);
		attachedDocs = new ArrayList<DroppedFileDto>();
		
		if (project == null) {
			project = new Project();
			initializeFormData();
			fundingId = 0;
		} else {
			for (AttachedDoc doc : project.getProjectVersion().getAttachedDoc()) {
				attachedDocs.add(new DroppedFileDto(doc.getFileName(), doc.getExecutionData(), doc.getIsValid(), doc.getId()));
			}
			if (project.getProjectVersion() != null && project.getProjectVersion().getFunding() != null)
				fundingId = project.getProjectVersion().getFunding().getId();
			else
				fundingId = 0;
		}
		page = 1;
		
		forms = projectsService.findAllByStepNum(page);
		funding = nomenclaturesService.findAllFundings();
	}
	
	@AfterCompose
	public void afterCompose(@ContextParam(ContextType.VIEW) Component view) {
		Selectors.wireComponents(view, this, false);
		Selectors.wireEventListeners(view, this);
	}

	public List<ProjectFormConfig> getForms() {
		return forms;
	}
	
	public List<DroppedFileDto> getAttachedDocs(ExecutionData execData, short page) {
		List<DroppedFileDto> results;
		if (page == 3) {
			results = attachedDocs.stream().
				filter(p -> p.getExecData() != null && p.getExecData().equals(execData) && p.isValid().equals(true)).collect(Collectors.toList());
		} else {
			results = attachedDocs.stream().
				filter(p -> null == p.getExecData() && p.isValid().equals(true)).collect(Collectors.toList());
		}
		return results.size() == 0 ? null : results;
	}
	
	public short getPage() {
		return page;
	}

	public Project getProject() {
		return project;
	}
	
	public int getFundingId() {
		return fundingId;
	}

	public List<Funding> getFunding() {
		return funding;
	}

	public List<String> model(String model) {
		List<Integer> range;
		List<String> rangeToString;
		switch(model) {
		case "COMBOMONTH":
			range = IntStream.rangeClosed(0, 11).boxed().collect(Collectors.toList());
			rangeToString = range.stream().map(s -> String.valueOf(s)).collect(Collectors.toList());
			return rangeToString;
			
		case "COMBOMONTHNUM":
			range = IntStream.rangeClosed(1, 60).boxed().collect(Collectors.toList());
			rangeToString = range.stream().map(s -> String.valueOf(s)).collect(Collectors.toList());
			return rangeToString;
		}
		
		return null;
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public ListModelList radioModel(String model) {
		switch(model) {
		case "YN":
			return new ListModelList(DoubleChoise.values());
			
		case "YNNA":
			return new ListModelList(TripleChoise.values());
		}
		
		return null;
	}

	@Command
	@NotifyChange({"page", "forms", "pageLabel"})
	public void changePage(@BindingParam("command") String command) {
		switch(command) {
		case "next":
			if (page < 5)
				page++;
			break;
			
		case "previous":
			if (page > 1)
				page--;
			break;
		}
		
		if (page <= 3) {
			forms = projectsService.findAllByStepNum(page);
		}
	}
	
	@Listen("onCommand=#commands")
	public void dropFile(Event event) {
		String data = (String) event.getData();
		DroppedFileDto file = new Gson().fromJson(data, DroppedFileDto.class);
		InputStream stream = new ByteArrayInputStream(Base64.getDecoder().decode(file.getFileContent()));
		saveFile(file.getFileName(), stream, file.getExecDataId() == null ? null : project.getProjectVersion().getProjectMainData().getExecutionDatas().get(file.getExecDataId()));
		BindUtils.postNotifyChange(null, null, attachedDocs, "*");
		BindUtils.postNotifyChange(null, null, this, "getAttachedDocs");
	}

	@Command
	@NotifyChange({"attachedDocs", "getAttachedDocs"})
	public void uploadFile(@BindingParam("event") UploadEvent event, @BindingParam("obj") ExecutionData execData) {
		Media media = event.getMedia();
		saveFile(media.getName(), media.getStreamData(), execData);
	}
	
	public int indexOf(ExecutionData execData) {
		return project.getProjectVersion().getProjectMainData().getExecutionDatas().indexOf(execData);
	}
	
	private void saveFile(String name, InputStream stream, ExecutionData execData) {
		int size = 0;
		try {
			size = stream.available();
		} catch (IOException e) {
			e.printStackTrace();
		}
		attachedDocs.add(new DroppedFileDto(name, FileUtils.byteCountToDisplaySize(size), stream, execData));
	}
	
	@Command
	@NotifyChange({"attachedDocs", "getAttachedDocs"})
	public void deleteFile(@BindingParam("file") DroppedFileDto file) {
		if (project.getId() == null) {
			attachedDocs.remove(file);
		} else {
			attachedDocs.get(attachedDocs.indexOf(file)).setValid(false);
			attachedDocs.get(attachedDocs.indexOf(file)).setIsSaved(false);
			project.getProjectVersion().getAttachedDoc()
				.get(project.getProjectVersion().getAttachedDoc()
						.indexOf(project.getProjectVersion().getAttachedDoc().stream().filter(p -> p.getId().equals(file.getDocId())).findFirst().get())).setIsValid("N");
		}
	}
	
	@Command
	public void sendProject() {
		// TODO: Validation and Project data
		Date dateCreated = new Date();
		if (project.getId() == null) {
			project.setDateCreated(dateCreated);
		}
		project.getProjectVersion().setDateCreated(dateCreated);
		projectsService.save(project);
		for(DroppedFileDto doc : attachedDocs) {
			if (doc.isValid() == true && doc.getIsSaved() == false) {
				projectsService.saveFile(doc.getData(), Config.PROJECTS_ATT_DOCS_PATH, doc.getFileName());
				
				project.getProjectVersion().getAttachedDoc()
					.add(new AttachedDoc(null, null, doc.getFileName(), Config.PROJECTS_ATT_DOCS_PATH, project.getProjectVersion(), doc.getExecData()));
			}
		}
	}
	
	@Command
	@NotifyChange("fundingId")
	public void chooseFunding(@BindingParam("funding") Funding funding) {
		fundingId = funding.getId();
		project.getProjectVersion().setFunding(funding);
	}
	
	@Command
	@NotifyChange("project")
	public void addExecutionData() {
		project.getProjectVersion().getProjectMainData().getExecutionDatas().add(new ExecutionData(project.getProjectVersion().getProjectMainData()));
		List<ProjectFormConfig>  dataForms = projectsService.findAllByStepNum((short) 3);
		for (ProjectFormConfig form : dataForms) {
			project.getProjectVersion().getProjectMainData().getExecutionDatas().get(0).getExecutionValues()
				.add(new ExecutionValue(project.getProjectVersion().getProjectMainData().getExecutionDatas()
						.get(project.getProjectVersion().getProjectMainData().getExecutionDatas().size() - 1), form));
		}
	}
	
	private void initializeFormData() {
		for (ProjectBudgetType type : nomenclaturesService.findAllBudgetTypes()) {
			project.getProjectVersion().getProjectBudget().add(new ProjectBudget(project.getProjectVersion(), type));
		}
		
		project.getProjectVersion().getProjectMainData().getExecutionDatas().add(new ExecutionData(project.getProjectVersion().getProjectMainData()));
		
		List<ProjectFormConfig> dataForms = projectsService.findAllByStepNum((short) 2);
		for (ProjectFormConfig form : dataForms) {
			project.getProjectVersion().getProjectMainData().getMainDataValues()
				.add(new ProjectMainDataValue(project.getProjectVersion().getProjectMainData(), form));
		}
		
		dataForms = projectsService.findAllByStepNum((short) 3);
		for (ProjectFormConfig form : dataForms) {
			project.getProjectVersion().getProjectMainData().getExecutionDatas().get(0).getExecutionValues()
				.add(new ExecutionValue(project.getProjectVersion().getProjectMainData().getExecutionDatas().get(0), form));
		}
	}
}
